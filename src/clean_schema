#!/usr/bin/env node
const fs = require('fs');
const readline = require('readline');

// remove whole CREATE statements if it's not in this list
const validCreateStatements = new Set([
  'GLOBAL',
  // 'INDEX',
  'LOCAL',
  'SCHEMA',
  'SEQUENCE',
  'TABLE',
  'TEMP',
  'TEMPORARY',
  'TYPE',
  'UNIQUE',
  'UNLOGGED',
  'VIEW',
]);

const excludeColumns = new Set([
  'created', //
  'created_by',
  'deleted',
  'deleted_by',
  'last_modified',
  'last_modified_by',
]);

let thisLineIsFirstColumn = false;
let createStatement = null;
let continuousNewLines = 0;

const input = process.argv[2] ? fs.createReadStream(process.argv[2]) : process.stdin;
readline.createInterface({ input }).on('line', (line) => {
  // 1. check the continuousNewLines
  if (line.length === 0) {
    continuousNewLines++;
    if (continuousNewLines === 2) {
      continuousNewLines = 0;
      createStatement = null;
    }
  } else {
    // reset to 0
    continuousNewLines = 0;
  }

  // It's create statement block
  if (createStatement !== null) {
    // Invalid CREATE statement
    if (!validCreateStatements.has(createStatement)) {
      return;
    }

    // Valid CREATE statement
    let columnIsDeleted = false;
    if (createStatement === 'TABLE') {
      // move , to the front
      line = line.replace(/(^\s*)(\w+.*$)/, (match, p1, p2, offset, string) => {
        if (p2[p2.length - 1] === ',') {
          p2 = p2.slice(0, -1);
        }
        return `${p1}, ${p2}`;
      });

      // 1. if type has ".", remove the prefix schema name
      line = line.replace(/(^\s*, \w+ )\w+\.(\w+.*$)/, (match, p1, p2, offset, string) => {
        return p1 + p2;
      });

      // 2. if has [], rename to 'xxx_array'
      line = line.replace(/(^\s*, \w+ \w+)\[\](.*$)/, (match, p1, p2, offset, string) => {
        return `${p1}_array${p2}`;
      });

      // 3. if DEFAULT has ::, remove the DEFAULT
      line = line.replace(/(^.*)( DEFAULT.+$)/, (match, p1, p2, offset, string) => {
        return p2.includes('::') ? p1 : string;
      });

      // 4. remove exclude columns
      line = line.replace(/^\s*, (\w+) .*$/, (match, column, offset, string) => {
        if (!excludeColumns.has(column)) return string;

        // column has been deleted
        columnIsDeleted = true;
        return '';
      });

      // remove , for the first column
      if (thisLineIsFirstColumn && !columnIsDeleted) {
        line = line.replace(/(^\s*), (\w+.*$)/, (match, p1, p2, offset, string) => {
          return p1 + p2;
        });
        thisLineIsFirstColumn = false;
      }
    }
    process.stdout.write(line + (columnIsDeleted ? '' : '\n'));
    return;
  }

  // check ALTER statements
  let result = line.match(/^ALTER (\w+)/);
  if (result && result[1] !== 'TABLE') {
    // ALTER TABLE is the only valid ALTER statement
    return;
  }

  // check CREATE statements
  result = line.match(/^CREATE (\w+)/);
  if (result === null) {
    // NOT CREATE statement
    createStatement = null;
    console.log(line);
    return;
  }

  // Invalid CREATE statement => Drop this line
  createStatement = result[1];
  if (!validCreateStatements.has(createStatement)) {
    return;
  }

  // Valid CREATE statement:

  // CREATE TYPE
  if (createStatement === 'TYPE') {
    // if type has ".", remove the prefix schema name
    line = line.replace(/(^CREATE TYPE )\w+\.(\w+.*$)/, (match, p1, p2, offset, string) => {
      return p1 + p2;
    });
  }

  // CREATE TABLE
  if (createStatement === 'TABLE') {
    thisLineIsFirstColumn = true;
  }

  console.log(line);
});
